# 一、形参与实参
# 函数的参数分为形式参数和实际参数，简称形参和实参：
#
# 形参即在定义函数时，括号内声明的参数。形参本质就是一个变量名，用来接收外部传来的值。
#
# 实参即在调用函数时，括号内传入的值，值可以是常量、变量、表达式或三者的组合:


# 二、形参与实参的具体使用
# 2.1位置参数: 按照从左到右的顺序一次定义的参数称之为: 位置参数
# 位置形参: 在函数定义阶段，按照从左到右的顺序直接定义的"变量名"
#          特点: 必须被传值
# def fun(x, y):
#     print(x, y)


# 位置实参: 在函数调用阶段，按照从左到右的顺序一次传入的值
#          特点: 按照顺序与形参一一传值
# fun(2, 1)
# fun(1, 2)

# 2.2关键字参数
# 关键字实参: 在调用阶段，按照k=v形式传入的值
#            特点: 可以完全不参照顺序
# def fun(x, y):
#     print(x, y)


# fun(y=1, x=2)

# 混合使用，强调
# 1、位置实参必须放在关键字实参之前
# fun(1, y=3)

# 2、不能为同一个形参重复传值
# fun(1,y=3,x=7)  # fun() got multiple values for argument 'x'


# 2.3 默认参数
# 默认形参: 在函数定义阶段，就已经为形参赋值，成为默认参数
#          特点: 在定义阶段就已经被赋值，意味着调用阶段可以不用赋值
# def fun(x, y=3):
#     print(x, y)


# fun(4)
# fun(4,y=5)


# 位置形参与默认形参混用，强调:
# 1、位置形参必须在默认形参左边
# 2、默认参数的值是在函数定义阶段被赋值的, 准确的说被赋予的是值的内存地址,
# python中都是内存地址的传递

# 3、虽然默认值可以被指定为任意出局类型，但是不推荐使用可变的类型

# 2.4 可变长度的参数(*与**的用法
# # 指的是在调用函数时，传入的值(实参)的个数不固定
# 而实参时用来为形参赋值的，所以对应着，针对溢出的实参必须有对应的形参接收


# 2.4.1、可变长度的位置参数: 用来接收溢出的位置实参
# 用法，参数前加*,溢出的实参会被*保存成元组的格式,然后会赋值给紧跟其后的形参名
# def fun(x, y, *args):
#     print(x, y, args)
#
#
# fun(1, 2, 4, 5, 6, 7, 8)  # 1 2 (4, 5, 6, 7, 8)

# *可以用在实参中，实参中带*的先将*后的值打散成位置实参
# def fun(x,y,z):
#     print(x,y,z)
#
# fun(*[1,2,3])

# 形参与实参中都带*
# def fun(x, y, *args):
#     print(x, y, args)


# fun("1", 2, *[3, 4, 5, 6, 7, 8])

# fun(*"hello")


# 2.4.2、可变长度的关键字参数: 用来接收溢出的关键字实参
# 用法: **形参名,**会将溢出的关键字实参保存成字典类型，然后赋值给紧跟其后的变量名
# def func(**kwargs):
#     print(kwargs)
#
#
# func(a='b', c=3)

# **用在实参中(**后跟的值只能是字典)，实参中带**，先将**后的值打散成关键字实参
# def fun(x, y, z):
#     print(x, y, z)
#
#
# # fun(*{'x': 2, 'y': 'asda', 'z': 232})  # x y z
# fun(**{'x': 2, 'y': 'asda', 'z': 232})


# 形参与实参都带**
# def fun(x, y, z, **kwargs):
#     print(x, y, z, kwargs)

# fun(*{'x': 1, 'y': 2, 'z': 3, 'o': 'asd', 'c': '123'})  # TypeError: fun() takes 3 positional arguments but 5 were given
# fun(**{'x': 1, 'y': 2, 'z': 3, 'o': 'asd', 'c': '123'})  # 1 2 3 {'o': 'asd', 'c': '123'}


# * 与 ** 混用
# *args必须在**kwargs之前
def func(x, *args, **kwargs):
    pass


# 补充
# 1、命名关键字参数
# 在定义函数时，*后定义的参数，如下所示称之为命名关键字参数
# 特点:
# 1、命名关键字实参必须按照k=v形式传值
def func(x, y, *, a, b):  # a,b为命名关键字参数
    print(x, y, a, b)


func(1, 2, a=3, b=888)
