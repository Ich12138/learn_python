# p366 如何隐藏属性
# 封装是面向对象三大核心特性的一个
# 封装<->整合

# 将封装的属性进行隐藏操作
# 在属性或者方法前面加上 __ 前缀，就会对外实现隐藏属性效果
# 1、在类外部无法直接访问双下滑线开头的属性，但知道了类名和属性名就可以拼出名字：_类名__属性，然后就可以访问了，
# 如Foo._A__N，所以说这种操作并没有严格意义上地限制外部访问，仅仅只是一种语法意义上的变形。

# 2、在类内部是可以直接访问双下滑线开头的属性的，比如self.__f1()，因为在类定义阶段类内部双下滑线开头的属性统一发生了变形。

# 3、变形操作只在类定义阶段发生一次,在类定义之后的赋值操作，不会变形。
# class Foo:
#     __x = 1
#
#     def test1(self):
#         print(self)

# class Foo:
#     def __init__(self, name, age):
#         self.__name = name
#         self.__age = age
#
#
# obj = Foo('name', 19)
# print(obj.__dict__)


# p367 为何隐藏属性
# 隐藏数据属性
# 将数据隐藏起来就限制了类外部对数据的直接操作，
# 然后类内应该提供相应的接口来允许类外部间接地操作数据，
# 接口之上可以附加额外的逻辑来对数据的操作进行严格地控制



# 隐藏函数
# 目的的是为了隔离复杂度，例如ATM程序的取款功能,该功能有很多其他功能组成，
# 比如插卡、身份认证、输入金额、打印小票、取钱等，而对使用者来说,
# 只需要开发取款这个功能接口即可,其余功能我们都可以隐藏起来